/// Greenshot - a free and open source screenshot tool
/// Copyright (C) 2007-2017 Thomas Braun, Jens Klingen, Robin Krom
/// 
/// For more information see: http://getgreenshot.org/
/// The Greenshot project is hosted on GitHub https://github.com/greenshot/greenshot
/// 
/// This program is free software: you can redistribute it and/or modify
/// it under the terms of the GNU General Public License as published by
/// the Free Software Foundation, either version 1 of the License, or
/// (at your option) any later version.
/// 
/// This program is distributed in the hope that it will be useful,
/// but WITHOUT ANY WARRANTY; without even the implied warranty of
/// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/// GNU General Public License for more details.
/// 
/// You should have received a copy of the GNU General Public License
/// along with this program.  If not, see <http://www.gnu.org/licenses/>.
/// 
/// This file is part of the definition of the Greenshot file format

syntax = "proto3";
import "BaseTypes.proto";
import "Style.proto";
import "Effects.proto";
package greenshot2.editor.fileformat;

option csharp_namespace = "Greenshot2.Editor.FileFormat";

// Basic style information for every shape
message ShapeStyle {
    Color fillColor = 1;
	Color stroke = 2;
	float strokeThickness = 3;
    bool shadow = 4;
	// Used to specify the dash and space values for the stroke being drawed.
	repeated float strokeDashArray = 5;

	// Possible caps for the line
	enum LineCaps {
		Flat = 0;
		Round = 1;
		Square = 2;
		Triangle = 3;
	}
    LineCaps lineCaps = 6;
    FontInfo font = 7;
    Color fontColor = 8;
}

// Line or arrow
message LineShape {
	Point p1 = 1;
	Point p2 = 2;
    enum ArrowHeads {
        None = 0;
        Start = 1;
        End = 2;
        Both = 3;
    }
    ArrowHeads arrowHeads = 3;
}

message EllipseShape {
	Bounds bounds = 1;
}

message RectangleShape {
	Bounds bounds = 1;
}

// An image shape
message ImageShape {
	Bounds bounds = 1;
	string resourceId = 2;
}

// A text shape
message TextShape {
	Bounds bounds = 1;
    Alignment horizontalAlignment = 2;
    Alignment verticalAlignment = 3;
	string text = 4;
}

// An empty shape, just to contain effects
message EmptyShape {
	Bounds bounds = 1;
}


// Enum with all possible shapes
enum ShapeTypes {
	Line = 0;
	Ellipse = 1;
    Rectangle = 2;
    Image = 3;
    Text = 4;
    Empty = 5;
}

message Shape {
	// GUID of the style for the shape, can be found in the styles map
	string shapeStyleId = 1;
    // a matrix for transformations
	Matrix matrix = 2;
    // Type of shape
    ShapeTypes shapeTypes = 3;
	oneof shape {
		LineShape line = 11;
        EllipseShape ellipse = 12;
        RectangleShape rectangle = 13;
        ImageShape image = 14;
        TextShape text = 15;
        EmptyShape empty = 16;
	}
    // All effects that this shape uses.
    repeated Effect effects = 17;
}
